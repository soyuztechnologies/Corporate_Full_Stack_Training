sap.ui.define([
	"sap/ui/core/mvc/Controller", "sap/m/MessageBox",
	"sap/ui/core/Fragment"
], function(Controller, MsgBox,Fragment) {
	"use strict";

	return Controller.extend("acc.fin.ar.controller.View2", {

		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf acc.fin.ar.view.View2
		 */
		//	onInit: function() {
		//
		//	},

		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf acc.fin.ar.view.View2
		 */
		//	onBeforeRendering: function() {
		//
		//	},

		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf acc.fin.ar.view.View2
		 */
		//	onAfterRendering: function() {
		//
		//	},

		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf acc.fin.ar.view.View2
		 */
		//	onExit: function() {
		//
		//	}

		onView2Back: function() {
			this.getView().getParent().getParent().toMaster("idView1");
		},

		onSuppLinkPress: function(oEvent) {
			var oLink = oEvent.getSource();
			var sText = oLink.getText();
			window.open("https://www.google.com/search?q=" + sText);
		},

		//Global Variable Declarations
		oSuppFragment: null,
		onSuppFilterPress: function(oEvent) {
			//MsgBox.confirm("Supplier Filter is pressed");
			//Check if the Fragment object is alrady created, if not then only perform Step 1 and 2 to avoid duplicate id issue
			if (!this.oSuppFragment) {
				//Step1: Create object of the xml Fragment Popup Fragment
				this.oSuppFragment = new sap.ui.xmlfragment("id1","acc.fin.ar.fragments.Popup", this);
				//Step2: Allow the fragment object to access the model data by the current View (DAD)
				//       providing access to model (OFFICE GATE) to the fragment object (CHILD)
				//       Add 'this' parameter to point to the current controller
				this.getView().addDependent(this.oSuppFragment, this);
				//Step2.1: Set the title of the SelectDialog Confrol to 'Select Suppliers'
				//this.oSuppFragment.setTitle("Select Suppliers");
				//Step2.1.1: Set same title referring to i18n model entry 'Supp_Filter_Dialog_Title'
				//Step1: Get the text maninatined from the i18n model
				var sSuppTitle = this.getOwnerComponent().getModel("i18n").getResourceBundle().getText("Supp_Filter_Dialog_Title");
				this.oSuppFragment.setTitle(sSuppTitle);
				//HOW TO HANDLE multiple controls within fragment and want to set title only for one control
				//	var oSuppPopup = this.oSuppFragment.byId("idPopup");
				//	oSuppPopup.setTitle(sSuppTitle);
			}
			//Step3: Bind the data to the items aggregation of the SelectDialog control inside the fragment object
			//       with the supplier data in the model and display using DisplayItemList control
			this.oSuppFragment.bindAggregation("items", {
				path: '/suppliers',
				template: new sap.m.DisplayListItem({
					label: "{name}",
					value: "{sinceWhen}"
				})
			});
			//Step4: Open fragment object
			this.oSuppFragment.open();
		},

		//Define Global Variables
		oCityFragment: null,
		//Any Event handling code in a fragment has to be mantained in all the view controllers 
		//The fragments are the Parasites -> They use the resources of the host (Controller of the View) 
		// for any JS coding required to handle the controls inside those fragments
		onHandleConfirm: function(oEvent) {
			debugger;
			MsgBox.confirm("Handle Confirm In");
		},
		onCityValueHelp: function(oEvent) {
			//MsgBox.confirm("City Value Help is requested");
			if (this.oCityFragment === null) {
				//Step1: Create Fragment Object
				this.oCityFragment = new sap.ui.xmlfragment("id2","acc.fin.ar.fragments.Popup", this);
				//Step2: Give access to the Fragment Object (CHILD) to access model data (OFFICE GATE)
				//       via current view (DAD). Also add 'this' to the parameter list to point to the view controller
				this.getView().addDependent(this.oCityFragment, this);
				//Step2.1: You can override any generic settings done in the fragment file 
				//         For example: Here Popup fragment file has multiSelect as true for SelectDialog
				//         But we dont need multiSelect for the city vlaue Help here, so lets override it by setting 
				//         multiSelect property of the selectDialog control in the fragment object as 'false'
				this.oCityFragment.setMultiSelect(false);
				//Step2.2 Customize the title of the SeletDialog control to 'Select City'
				//this.oCityFragment.setTitle("Select City");
				//Step2.3 Customize the title of the SeletDialog control to 'City_Filter_Dialog_Title' from i18n
				var sCityTitle = this.getOwnerComponent().getModel("i18n").getResourceBundle().getText("City_Filter_Dialog_Title");
				this.oCityFragment.setTitle(sCityTitle);
			}
			//Step3: Bind the City data from the model to the SelectDialog control inside the fragment object 
			//       using Aggregation Binding at the items aggregation of the SelectDialog control
			this.oCityFragment.bindAggregation("items", {
				path: '/cities',
				template: new sap.m.StandardListItem({
					title: "{name}",
					info: "{famousFor}",
					icon: "sap-icon://map"
				})
			});
			//Step4: Open the fragment object
			this.oCityFragment.open();
		}

	});

});